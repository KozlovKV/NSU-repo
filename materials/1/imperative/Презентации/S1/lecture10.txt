=================== Статические переменные =================

Статическая локальная переменная --- физически то же самое, что глобальная, но видна только внутри функции.
Синтаксис:
  какаятофункция (...) {
    static типпеременной имяпеременной;         //как объявление локальной переменной, но добавили static в начале
  }

Пример: быстрое вычисление количества битов в числе:
  int popcount(uint32_t x) {
    static int byteCount[256];                  //эти две переменные живут всё время работы программы
    static int isInitialized = 0;               //сначала ставим ноль --- byteCount ещё не заполнили

    if (!isInitialized) {                       //выполняется только один раз --- при первом вызове
      isInitialized = 1;                        //ставим флаг, чтобы при след. вызове не вычислять заново
      for (int i = 0; i < 256; i++) {             
        byteCount[i] = 0;                       //
        for (int j = 0; j < 8; j++)             //вычисляем содержимое byteCount
          byteCount[i] += (i >> j) & 1;         //
      }
    }

    int res = 0;
    uint8_t *bytes = (uint8_t*)&x;              //берём адрес переменной x с типом uint8_t (беззнаковый байт)
    for (int i = 0; i < 4; i++)
        res += byteCount[bytes[i]];             //считаем количество битов, используя byteCount
    return res;
  }


================ Память: основные части ===================

>> Программа (процесс ОС) работает в виртуальной памяти --- НЕ в реальной физической памяти.
В виртуальной памяти память других процессов отсутствует --- ваша программа одна и может делать что хочет.
Размер виртуальной памяти (обычно): 2GB--4GB в 32-битном режиме и 256TB--16EB в 64-битном    (размер физической памяти значения не имеет).

>> Есть несколько отдельных областей памяти, в которых программа на C может хранить данные:

Стандартные области памяти в любой программе на C:
1) Образ (image): машинный код, глобальные и статические локальные переменные, литеральные константы.
2) Стек выполнения/вызовов (call stack): локальные переменные, стековые кадры.
3) Куча (heap): выделяемая динамически с помощью malloc память.

// Специфичные для платформы области (вне стандарта С):
// 4*) Страницы памяти, запрошенные у ОС напрямую (VirtualAlloc / mmap).
// 5*) Отображение ядра ОС в виртуальное адресное пространство программы (привет Spectre / Meltdown).

Неинициализированные переменные изначально:
  имеют значение ноль в образе (1) --- например, глобальные массивы по умолчанию забиты нулями, что гарантируется языком C
  имеют неопределённое значение на стеке (2) и в куче (3)


>> Образ --- это примерно содержимое исполняемого файла.
ОС раскатывает содержимое этого файла по памяти при запуске -- получается образ в памяти.
Ненулевые начальные значения глобальных переменных/строк можно найти (и даже поменять) в исполняемом файле.
Нулевые переменные сжимаются. Например, наличие глобального "int arr[100000000];" в коде не раздувает исполняемый файл до 400 мегабайт.

Ограничение на размер образа: 2 GB в MSVC, даже в 64-битном режиме!


>> Стек вызовов.
Стек состоит из стековых кадров (stack frames), по одному кадру на каждый вложенный вызов функции.
В каждом stack frame лежат локальные переменные, адрес возврата (откуда продолжать выполнять вызывающую функцию), параметры и т.д.
В случае рекурсии каждый вложенный вызов одной функции (напр. qsort) работает с личными независимыми экземплярами локальных переменных.

Размер стека: На MSVC по умолчанию размером всего 1 MB.  (хотя теоретически его можно увеличить)
Из-за этого рекомендуется большие массивы делать глобальными или размещать на куче.

Заведение локальной переменной бесплатно, при вызове функции регистр просто сдвигается на общий размер их всех:     sub esp, 12A0h;
(правда это верно только если эту переменную не инициализировать).

Значение неинициализированной переменной --- скорее всего равно тому, что лежало в уже удалённом стековом кадре, который был раньше на этом месте.

// В многопоточной программе (это несколько параллельно работающих программ, у которых память общая) у каждого потока свой индивидуальный call stack.
// А вот образ один и куча одна на все потоки.


>> Куча имеет почти безграничный размер.
В реальном коде в куче обычно размещается 99% всех долгоживущих данных программы (глобальные переменные не любят).
Этому помогает динамичность и гибкость кучи: можно выделять любое кол-во блоков, можно считать размер по время выполнения, можно переиспользовать освобождённые блоки и т.п.


==================== Разделяй и властвуй ===================

Метод "разделяй, властвуй и объединяй" делит задачу на части, решает части рекурсивно, в потом объединяет частичные результаты в общий результат.

Псевдокод:
  solve(data) {                             //функция решения задачи
                                            //принимает входные данные "data", возвращает результат решения
    if (data is small) {
      return solve_trivially(data)          //когда задача достаточно мала, решаем ещё влоб тривиальным образом
    }

    datL, datR = divide(data)               //иначе делим её на части (подзадачи)

    resL = solve(datL)                      //рекурсивно решаем обе части
    resR = solve(datR)                      //получаем результаты решения подзадач

    res = merge(resL, resR)                 //объединяем результаты для подзадач в общий результат
    return res
  }

Алгоритмы такого рода обычно рекурсивные.
Правильность доказывается индукцией по вызовам.

Сначала выписывается индукционное предположение:
  solve(data) возвращает правильный результат решения задачи с входными данными "data"
Дальше доказываем как обычно:
  1. База: доказываем, что solve_trivially работает верно.
  2. Индукционный переход: предполагая "resL" и "resR" правильными результатами для "datL" и "datR"
     доказываем, что "res" будет правильным результатом для "data".
  (3. Завершение --- часто отсутствует)


Рассмотрим два алгоритма в стиле "разделяй и властвуй" для сортировки массива: mergesort и quicksort.


==================== Сортировка ===================

Постановка задачи:
  есть массив элементов A[0..n-1];   элемент = ключ + (значение)
  нужно поменять порядок элементов в массиве так, чтобы они шли по возрастанию ключа (точнее по неубыванию)

Решения за время O(N^2) рассматривали ранее. Хочется быстрее.


>>> Mergesort:
  1) делим массив пополам (или почти пополам)
  2) сортируем половины рекурсивно
  3) merge: сливаем два отсортированных массива в один отсортированный массив
Ключевая сложность --- шаг 3. merge

Слияние делается за O(K), где K --- количество элементов в итоговом массиве.
Идея: в каждой половине храним указатель на "хвост" оставшихся элементов.
На каждом шаге смотрим на первые элементы в хвостах, и выбираем минимальный из них.
Переносим его в ответ, сдвигая указатель на хвост.
Повторяем, пока в хвостах что-то есть.

           (хвост)                             (хвост)
            | V                                 | V
    +---+---+---+---+---+----+      +---+---+---+---+---+---+
    | 0 | 4 | 5 | 8 | 9 | 10 |      | 1 | 2 | 4 | 6 | 7 | 9 |
    +---+---+---+---+---+----+      +---+---+---+---+---+---+

       +---+---+---+---+---+---+---+---+---+---+---+---+
       | 0 | 1 | 2 | 4 | 4 |   |   |   |   |   |   |   |
       +---+---+---+---+---+---+---+---+---+---+---+---+
                            ^^^
               (след. элемент попадёт сюда)

Что делать с равными элементами?
Можно выбирать любой из таких элементов.
Либо находить сразу блоки одинаковых элементов, и обрабатывать их сразу.


Общая сложность алгоритма mergesort?
Пусть для простоты N = 2^s, тогда структура вызовов выглядит так:

    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+
    |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |  |       1 * N
    +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+

   +--+--+--+--+--+--+--+--+ +--+--+--+--+--+--+--+--+
   |  |  |  |  |  |  |  |  | |  |  |  |  |  |  |  |  |      2 * N/2
   +--+--+--+--+--+--+--+--+ +--+--+--+--+--+--+--+--+

 +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+
 |  |  |  |  | |  |  |  |  | |  |  |  |  | |  |  |  |  |    4 * N/4
 +--+--+--+--+ +--+--+--+--+ +--+--+--+--+ +--+--+--+--+
                                                            ...
   ...   ...   ...   ...   ...   ...   ...   ...   ...      
                                                            N * 1

Время работы пропорционально суммарной длине всех отрезков, а она равна (N * s) = N log2 N.
Получается O(N log N).



>>> Quicksort:
  1) выбираем в массиве элемент-пивот X.
  2) partition: делим массив надвое, в левую половину помещаем элементы меньше X, а в правую --- больше X.
  3) рекурсивно сортируем обе половины.
Элементы, равные пивоту X, можно помещать как влево, так и вправо.
Ключевая сложность --- шаг 2. partition

Способы реализовывать partition:
  1) Простой вариант с доп. памятью: заводим заранее вспомогательных массивы для левой и правой частей.
     Пробегаем по элементам массива, сравниваем каждый с пивотом, копируем его в одну из частей согласно результату сравнения.
     После завершения копируем содержимое вспомогательных массивов обратно в массив.
  2) in-place --- дополнительной памяти.
     Можно писать в стиле Lomuto или в стиле Hoare.
     Второй вариант наиболее быстрый: ставят указатели на начало и конец, и двигают их навстречу друг другу в поисках пары, которую надо поменять местами.
Время работы разбиения: O(K), где K --- количество элементов разбиваемого массива.
